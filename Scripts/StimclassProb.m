%%
% Make a training and test set with the goal of classifying stimuli by the
% statistics of their spike trains.  Woohoo.

function s=StimclassProb(command)

if ~exist('command','var'), command='normal'; end


F=FelineFileFinder;
F.Start;
C=F.GrabCats;

names=arrayfun(@(x)x.catName,C,'uniformoutput',false);
disp(char(names'));


chosenID=1; % Choosing Just Neuron 1 for now.
nsets=2;

for i=1:length(C) % For each experiment

    S=SpikeBanhoff;
    S.GrabCat(C(i));
    
    switch command
        case 'fake'
            % Take a false distribution, generated by Poisson process
            S.sWidth=0.2;
            S=S.Poissonification;
            
    end    
    
    
    psth=S.T;    
    psth=psth(chosenID,:);
    cond=S.cond;
    
%     Step... ORDER BY CONDITION!
%     So that test and training data are not driven by same stimulus.
    [~,ixc]=sort(cond);
    psth=psth(:,ixc);
    cond=cond(ixc);
%     

           
    if size(psth,2)==1
        disp 'ONE TRIAL FOUND FOR PSTH.. SPLITTING WITHIN TRIAL' 
        indices=@(x,jj)floor(length(x)*(jj-1)/nsets)+1:floor(length(x)*jj)/nsets;
        for j=1:nsets
            
            s(i,j).psth=cellfun(@(x)x(indices(x,j)),psth,'uniformoutput',false);
            s(i,j).set=j;
            s(i,j).name=S.name;
        end
    else
        % Organize into trial
        disp 'MULTIPLE TRIALS FOUND FOR PSTH.. SPLITTING BETWEEN TRIALS'
        for j=1:nsets
            indeces=floor(size(psth,2)*(j-1)/nsets)+1:floor(size(psth,2)*(j)/nsets);
            s(i,j).psth=psth(:,indeces);
            s(i,j).cond=cond(indeces);
            s(i,j).set=j;
            s(i,j).name=S.name;
        end
    end
    
    
    
    
end

% uisave({'s'});


end