function [E,Info]=readEvtFile(filename)
% Reads one of those beautiful event files output by NetStation.  Returns a
% a structure array E of events, and a scalar structure I of file info.
%
% Usage:
% [E I]=readEvtFile;
%
% Info is a structure array containing file info.  It contains 
%   Title:  Title of experiment
%   StartTime:  String specifying time/date of experiment
%
% E is a structure array of events with fields:
%   code:   String specifying the event code
%   type:   Don''t really know.  It's always "Stimulus Event" here
%   track:  The track from which the event came
%   time:   Time, in seconds, since the start of the experiment
%   And whatever other events were specified
%   
% Info is a structure containing info about the file.
%
% Example Usage
% [E I]=readEvtFile;
% unique({E.code})                  % Returns a list of all event codes in the list
% v=[E.time];                       % Creates a vector of event times
% ix=find(strcmp({E.code},'DIN1')); % Find events where code is 'DIN1'
% ix=find([E.mode]==2);             % Find events where mode is 2.
%
%
% Peter O'Connor
% oconnorp..at..ethz..dot..ch
 
%% Get file ans stuff

if ~exist('filename','var'), [f p]=uigetfile('*.evt','Select Event Log generated by NetStation'); filename=[p f]; end

badsymbols={'*','#',' ','%','*','_'};

%% Read Header
fid=fopen(filename);
line=fgets(fid); tt=textscan(line,'%s');
Info.Title=tt{1}{1};
fgets(fid);fgets(fid); 
line=fgets(fid);
tt=textscan(line,'%s','Delimiter','\t'); tt=tt{1};
Info.StartTime=datestr(tt{5},'_yymmdd/HH:MM:SS.FFF');
for j=7:2:length(tt)
    if isempty(tt{j}), continue; end        
    % If you get an error here, add whatever symbol caused it here.
    I.( regexprep(tt{j},badsymbols,'') )=str2double(tt{j+1});        
end

% Function to convert event time string to seconds since start of experiment
starttime=datenum(tt{5},'_yymmdd/HH:MM:SS.FFF');
d2s=@(stime)((datenum(stime,'_yymmdd/HH:MM:SS.FFF')-starttime)*86400);

%% Read Events Loop
i=1;
E=struct; % Stops mlint from bitching
while true
    
    % Read Line from file
    line=fgets(fid);
    if line==-1, break; end
    tt=textscan(line,'%s','Delimiter','\t');
    tt=tt{1};
        
    % Enter Info into Structure
    E(i).code=tt{1};
    E(i).type=tt{3};
    E(i).track=tt{4};    
    E(i).time=d2s(tt{5});    
    for j=7:2:length(tt)
        if isempty(tt{j}), continue; end        
        % If you get an error here, add whatever symbol caused it to badsymbols.
        E(i).( regexprep(tt{j},badsymbols,'') )=str2double(tt{j+1});        
    end
    
    i=i+1;
end
fclose(fid);

%% Swap empties for nans
% Fill all empty fields with nans.  This ensures that attempts to construct
% arrays with [E.(field)] do not have misleading results when some elements
% are empty
f=fieldnames(E);
for i=1:length(f)
    empties=cellfun(@isempty,{E.(f{i})});
    for j=find(empties)
        E(j).(f{i})=nan;
    end
end

end

