
A=CatParliament;
if ~A.loadCats, return; end
A.copyCats=false;       % copyCats=true mean you copy the object, and leave the original, before doing the preprocessing and statistics.  

A.filter=@filterFun;
A.preproc=@preProc;

%% Define Statistics of Interest

A.stats(1).name='MeanFano 0.5';
% A.stats(1).fun=@(SC)mean(SC.S.FanoFactor);
A.stats(1).fun=@(SC)mean(cell2mat(RovingFanos(SC.S.T,0.5,SC.S.cond)));
A.stats(1).groups=[1 2];

A.stats(2).name='Subsequent ISI Mutual Information (6 divisions)';
A.stats(2).fun=@(SC)mean(SC.S.ISI_MI(6,1),2);

A.stats(3).name='Spike Count';
A.stats(3).fun=@(SC)sum(squeeze(SC.S.nS));

A.stats(4).name='Median Kurtosis';
A.stats(4).fun=@(SC)median(SC.S.isi_kurtosis);

A.stats(5).name='Mean CV2';
A.stats(5).fun=@(SC)cellfun(@(x)mean(x),SC.S.CVdist);

A.stats(6).name='Mean Spike Rate';
A.stats(6).fun=@(SC)SC.S.meanSpikeRate;

A.stats(7).name='MaxMeanIntraTrialCorr'; 
A.stats(7).fun=@(SC)max(SC.S.intraTrialCorr);
A.stats(7).groups=[1 2];

A.stats(8).name='MaxPeriodicity'; 
A.stats(8).fun=@(SC)max(SC.S.periodicity);
A.stats(8).groups=[1];

A.stats(9).name='Structure';
A.stats(9).fun=@structurefun;
    function st=structurefun(SC)
        % A measure of the structure of the signal.  Basically just the
        % relative strength of the non-DC component to the DC.
        X=abs(fft(SC.S.TS));
        st=bsxfun(@rdivide,mean(X(1:fix(end/2),:)),X(1,:));
        st=mean(st(~isnan(st)));
    end

A.stats(10).name='Max Drivenness';
A.stats(10).fun=@(SC)max(SC.S.Drivenness);
A.stats(10).groups=[1 2];

A.stats(11).name='Mean Var Hist';
A.stats(11).fun=@meanvarhist;
    function N=meanvarhist(SC)
        
        win=0.5; % seconds
        maxVar=100; % Spikes in the window
        maxMean=40; % Spikes in thw window
        
        [~, v, m]=RovingFanos(SC.S.T(1,:),win,SC.S.cond);
        N=hist3([v m],{linspace(0,maxVar,20),linspace(0,maxMean,20)});
        N=N/sum(N);
        
     end




%% Define Groups
% The group fun takes in a MinisterCat object and outputs a StimCat object.

A.groups(1).name='tuning';
A.groups(1).fun=@(MC)MC.tun; 

A.groups(2).name='movies';
A.groups(2).fun=@(MC)MC.mov; 

A.groups(3).name='whitenoise';
A.groups(3).fun=@(MC)MC.whi; 

A.splitCells; % Divide the cells

A.minSpikesFilter(1); % Filter out experiments with <1 spike per trial.

%% Get 'er done

% A.crunch;
% A.GUI;
